/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backass;
import java.util.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
/**
 *
 * @author Pita
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindown
     */
    Setting setting;
    protected Config config = new Config("config.txt");
    public MainWindow() {
        initComponents();
        config = new Config("config.txt");
        setting = new Setting(this);
        setting.setDefaultCloseOperation(this.HIDE_ON_CLOSE);
        setting.pack();
        LoadBackupPath();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menu3 = new java.awt.Menu();
        BackupBt = new javax.swing.JButton();
        SourcePath = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        filelist = new javax.swing.JTextArea();
        TargetPath = new javax.swing.JTextField();
        ChangeSource = new javax.swing.JButton();
        ChangeTarget = new javax.swing.JButton();
        ArchivePath = new javax.swing.JTextField();
        ChangeArchive = new javax.swing.JButton();
        BuildDB = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        menu3.setLabel("menu3");
        menuBar1.add(menu3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BackupBt.setText("Backup");
        BackupBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackupBtActionPerformed(evt);
            }
        });

        SourcePath.setText("C:\\Users\\Pita\\Desktop\\BackupAss\\Photo");

        filelist.setColumns(20);
        filelist.setRows(5);
        jScrollPane1.setViewportView(filelist);

        TargetPath.setText("C:\\Users\\Pita\\Desktop\\BackupAss\\Backup");

        ChangeSource.setText("...");
        ChangeSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeSourceActionPerformed(evt);
            }
        });

        ChangeTarget.setText("...");
        ChangeTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeTargetActionPerformed(evt);
            }
        });

        ArchivePath.setText("C:\\Users\\Pita\\Desktop\\BackupAss\\Archive");

        ChangeArchive.setText("...");
        ChangeArchive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeArchiveActionPerformed(evt);
            }
        });

        BuildDB.setText("RebuildDB");
        BuildDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildDBActionPerformed(evt);
            }
        });

        jMenu1.setText("Setting");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Set Mysql");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ArchivePath, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TargetPath, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                            .addComponent(SourcePath, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ChangeArchive, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BuildDB))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ChangeSource, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ChangeTarget, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BackupBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SourcePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChangeSource))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TargetPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChangeTarget)))
                    .addComponent(BackupBt, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArchivePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ChangeArchive)
                    .addComponent(BuildDB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackupBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackupBtActionPerformed
        // TODO add your handling code here:
        /*
        FileRecord fr = new FileRecord();
        File directory = new File(SourcePath.getText());
        File[] f = directory.listFiles();  
        List<String> files = new ArrayList<>();
        List<String> directorys = new ArrayList<String>();
        filelist.setText("");
        if(!Files.isDirectory(Paths.get(SourcePath.getText())))
        {
            JOptionPane.showMessageDialog(this, "Source path not found. Please confirm the source path is correct. ");
            return;
        }
        
        if(!Files.isDirectory(Paths.get(TargetPath.getText())) || !Files.isDirectory(Paths.get(ArchivePath.getText())))
        {
            int reply = JOptionPane.showConfirmDialog(null, "Working folder is not exist, create it?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION)
            {
                try {
                    if(!Files.isDirectory(Paths.get(TargetPath.getText())) )
                        Files.createDirectories(Paths.get(TargetPath.getText()));
                    if(!Files.isDirectory(Paths.get(ArchivePath.getText())) )
                        Files.createDirectories(Paths.get(ArchivePath.getText()));
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Cannot create folder. "+ex.toString());
                }
            }
        }   
         
        for(int i=0; i < f.length; i++){
            if(f[i].isFile()){
                files.add(f[i].getAbsolutePath());
                filelist.append(f[i].getAbsolutePath()+"\n");
                fr.addFile(f[i].getAbsolutePath(),TargetPath.getText(),ArchivePath.getText());
            }
            else
                directorys.add(f[i].getAbsolutePath());
        }
        */
        
        
        try {
            String url = "jdbc:mysql://"+config.GetValue("Server")+":"+config.GetValue("Port")+"/"+config.GetValue("Database");
            String user = config.GetValue("Username");
            String password = config.GetValue("Password");
            Connection con = DriverManager.getConnection(url, user, password);
            Backup(SourcePath.getText(),TargetPath.getText(),ArchivePath.getText(),true);
        }
        catch(Exception ex)
        {
            Log.Write("Cannot connect to database", 3);
        }
        
    }//GEN-LAST:event_BackupBtActionPerformed

    protected void LoadBackupPath()
    {
        try {
            String url = "jdbc:mysql://"+config.GetValue("Server")+":"+config.GetValue("Port")+"/"+config.GetValue("Database");
            String user = config.GetValue("Username");
            String password = config.GetValue("Password");
            Connection con = DriverManager.getConnection(url, user, password);
  
            String sql = "SELECT * FROM variable where name like 'backupass%'";
            
            PreparedStatement ps;
            ResultSet rs;
            String value;
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            //File Exist
            while(rs.next()) {
                value = rs.getString("value");
                value = value.substring(value.indexOf(":\"")+2);
                value = value.substring(0,value.length()-2);
                this.config.Set(rs.getString("name"), value);
                Log.Write(rs.getString("name")+"="+value, 1);
            }   
            //this.config.Save();
            
            Log.Write(this.config.GetValue("backupass_target_path"), 1);
            Log.Write(this.config.GetValue("backupass_backup_path"), 1);
            Log.Write(this.config.GetValue("backupass_archive_path"), 1);
            
            this.SourcePath.setText(this.config.GetValue("backupass_target_path"));
            this.TargetPath.setText(this.config.GetValue("backupass_backup_path"));
            this.ArchivePath.setText(this.config.GetValue("backupass_archive_path"));
        }
        catch(Exception ex)
        {
            Log.Write("Cannot connect to database\n"+ex.getMessage(), 3);
        }
    }
    private void ChangeSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeSourceActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(SourcePath.getText());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {   
            SourcePath.setText(fc.getSelectedFile().toString());
        }
    }//GEN-LAST:event_ChangeSourceActionPerformed

    private void ChangeTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeTargetActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(TargetPath.getText());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {   
            TargetPath.setText(fc.getSelectedFile().toString());
        }
    }//GEN-LAST:event_ChangeTargetActionPerformed

    private void ChangeArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeArchiveActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(ArchivePath.getText());
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {   
            ArchivePath.setText(fc.getSelectedFile().toString());
        }
    }//GEN-LAST:event_ChangeArchiveActionPerformed

    //Rebuild Database
    private void BuildDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildDBActionPerformed
        String password = JOptionPane.showInputDialog(this, "Please Enter Password:");
        if(password.compareTo("Aa123456") == 0)
        {
            FileRecord fr = new FileRecord(config);
            fr.BuildDB();
        }
    }//GEN-LAST:event_BuildDBActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        setting.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void Backup(String Source, String Target, String Archive,boolean WindowMode)
    {
        FileRecord fr = new FileRecord(config);
        File directory = new File(Source);
        File[] f = directory.listFiles();  
        List<String> files = new ArrayList<>();
        List<String> directorys = new ArrayList<String>();
        if(WindowMode)
            filelist.setText("");
        if(!Files.isDirectory(Paths.get(Source)))
        {
            if(WindowMode)
                JOptionPane.showMessageDialog(this, "Source path not found. Please confirm the source path is correct. ");
            else
                Log.Write("Source path not found. Please confirm the source path is correct. ",3);
            return;
        }
        
        if(!Files.isDirectory(Paths.get(Target)) || !Files.isDirectory(Paths.get(Archive)))
        {
            int reply;
            if(WindowMode)
                reply = JOptionPane.showConfirmDialog(null, "Working folder is not exist, create it?", "Confirm", JOptionPane.YES_NO_OPTION);
            else
                reply = JOptionPane.YES_OPTION;
            if (reply == JOptionPane.YES_OPTION)
            {
                try {
                    if(!Files.isDirectory(Paths.get(Target)) )
                        Files.createDirectories(Paths.get(Target));
                    if(!Files.isDirectory(Paths.get(Archive)) )
                        Files.createDirectories(Paths.get(Archive));
                } catch (IOException ex) {
                    if(WindowMode)
                        JOptionPane.showMessageDialog(this, "Cannot create folder. "+ex.toString());
                    else
                        Log.Write("Cannot create folder. "+ex.toString(),3);
                }
            }
        }   
         
        for(int i=0; i < f.length; i++){
            fr.addFile(f[i].getAbsolutePath(),Source,Target,Archive,filelist);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        if(args.length == 3)
        {
            MainWindow mainwin = new MainWindow();
                mainwin.Backup(args[0],args[1],args[2],false);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ArchivePath;
    private javax.swing.JButton BackupBt;
    private javax.swing.JButton BuildDB;
    private javax.swing.JButton ChangeArchive;
    private javax.swing.JButton ChangeSource;
    private javax.swing.JButton ChangeTarget;
    private javax.swing.JTextField SourcePath;
    private javax.swing.JTextField TargetPath;
    protected javax.swing.JTextArea filelist;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.MenuBar menuBar1;
    // End of variables declaration//GEN-END:variables
}
